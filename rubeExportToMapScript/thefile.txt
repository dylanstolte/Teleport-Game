//Source code dump of Box2D scene: untitled1
//
//  Created by R.U.B.E 1.7.3
//  Using Box2D version 2.3.0
//  Sat March 5 2016 15:52:53
//
//  This code is originally intended for use in the Box2D testbed,
//  but you can easily use it in other applications by providing
//  a b2World for use as the 'm_world' variable in the code below.

b2Vec2 g(0.000000000000000e+000f, -1.000000000000000e+001f);
m_world->SetGravity(g);
b2Body** bodies = (b2Body**)b2Alloc(2 * sizeof(b2Body*));
b2Joint** joints = (b2Joint**)b2Alloc(0 * sizeof(b2Joint*));
{
  b2BodyDef bd;
  bd.type = b2BodyType(0);
  bd.position.Set(0.000000000000000e+000f, 0.000000000000000e+000f);
  bd.angle = -3.141592741012573e+000f;
  bd.linearVelocity.Set(0.000000000000000e+000f, 0.000000000000000e+000f);
  bd.angularVelocity = 0.000000000000000e+000f;
  bd.linearDamping = 0.000000000000000e+000f;
  bd.angularDamping = 0.000000000000000e+000f;
  bd.allowSleep = bool(4);
  bd.awake = bool(2);
  bd.fixedRotation = bool(0);
  bd.bullet = bool(0);
  bd.active = bool(32);
  bd.gravityScale = 1.000000000000000e+000f;
  bodies[0] = m_world->CreateBody(&bd);

  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(7.288479003906250e+002f, 6.084265518188477e+001f);
    vs[1].Set(6.943886108398438e+002f, 5.994786453247070e+001f);
    vs[2].Set(3.083564147949219e+002f, -1.306517944335938e+002f);
    vs[3].Set(3.046295776367188e+002f, -2.400391693115234e+002f);
    vs[4].Set(3.138543701171875e+002f, -2.989800720214844e+002f);
    vs[5].Set(5.032756652832031e+002f, -5.829558715820312e+002f);
    shape.Set(vs, 6);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(6.956854248046875e+002f, 1.004418563842773e+002f);
    vs[1].Set(5.394721069335938e+002f, 1.004307861328125e+002f);
    vs[2].Set(5.391149902343750e+002f, 6.027239227294922e+001f);
    vs[3].Set(6.943886108398438e+002f, 5.994786453247070e+001f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(6.943886108398438e+002f, 5.994786453247070e+001f);
    vs[1].Set(5.391149902343750e+002f, 6.027239227294922e+001f);
    vs[2].Set(3.083564147949219e+002f, -1.306517944335938e+002f);
    shape.Set(vs, 3);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(5.032756652832031e+002f, -5.829558715820312e+002f);
    vs[1].Set(3.134428100585938e+002f, -5.127180175781250e+002f);
    vs[2].Set(1.615440063476562e+002f, -5.132001953125000e+002f);
    vs[3].Set(1.615439910888672e+002f, -5.836134643554688e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(5.032756652832031e+002f, -5.829558715820312e+002f);
    vs[1].Set(3.138543701171875e+002f, -2.989800720214844e+002f);
    vs[2].Set(3.134428100585938e+002f, -5.127180175781250e+002f);
    shape.Set(vs, 3);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(3.138543701171875e+002f, -2.989800720214844e+002f);
    vs[1].Set(3.046295776367188e+002f, -2.400391693115234e+002f);
    vs[2].Set(1.442602233886719e+002f, -2.395420074462891e+002f);
    vs[3].Set(1.437101593017578e+002f, -3.004201965332031e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(5.391149902343750e+002f, 6.027239227294922e+001f);
    vs[1].Set(8.959574890136719e+001f, 5.988055038452148e+001f);
    vs[2].Set(1.275502471923828e+002f, 4.214611053466797e+001f);
    vs[3].Set(2.609963073730469e+002f, 3.770278930664062e+001f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(5.391149902343750e+002f, 6.027239227294922e+001f);
    vs[1].Set(2.609963073730469e+002f, 3.770278930664062e+001f);
    vs[2].Set(3.083564147949219e+002f, -1.306517944335938e+002f);
    shape.Set(vs, 3);

    fd.shape = &shape;

    bodies[0]->CreateFixture(&fd);
  }
}
{
  b2BodyDef bd;
  bd.type = b2BodyType(0);
  bd.position.Set(0.000000000000000e+000f, 0.000000000000000e+000f);
  bd.angle = -3.141592741012573e+000f;
  bd.linearVelocity.Set(0.000000000000000e+000f, 0.000000000000000e+000f);
  bd.angularVelocity = 0.000000000000000e+000f;
  bd.linearDamping = 0.000000000000000e+000f;
  bd.angularDamping = 0.000000000000000e+000f;
  bd.allowSleep = bool(4);
  bd.awake = bool(2);
  bd.fixedRotation = bool(0);
  bd.bullet = bool(0);
  bd.active = bool(32);
  bd.gravityScale = 1.000000000000000e+000f;
  bodies[1] = m_world->CreateBody(&bd);

  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(2.702711296081543e+001f, -3.904467468261719e+002f);
    vs[1].Set(2.630766487121582e+001f, -1.198422470092773e+002f);
    vs[2].Set(9.176950454711914e+000f, -4.990382385253906e+001f);
    vs[3].Set(-8.990377044677734e+001f, 2.023161125183105e+001f);
    vs[4].Set(-8.996823883056641e+001f, -6.945512084960938e+002f);
    vs[5].Set(2.650091552734375e+001f, -6.734942016601562e+002f);
    shape.Set(vs, 6);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(4.912695007324219e+002f, -6.968598632812500e+002f);
    vs[1].Set(4.911109008789062e+002f, -6.761696166992188e+002f);
    vs[2].Set(2.650091552734375e+001f, -6.734942016601562e+002f);
    vs[3].Set(-8.996823883056641e+001f, -6.945512084960938e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(9.176950454711914e+000f, -4.990382385253906e+001f);
    vs[1].Set(8.709443092346191e+000f, 2.008815002441406e+001f);
    vs[2].Set(-8.990377044677734e+001f, 2.023161125183105e+001f);
    shape.Set(vs, 3);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(2.124460601806641e+002f, -1.206493225097656e+002f);
    vs[1].Set(5.364236831665039e+001f, -4.864977264404297e+001f);
    vs[2].Set(9.176950454711914e+000f, -4.990382385253906e+001f);
    vs[3].Set(2.630766487121582e+001f, -1.198422470092773e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(2.131258697509766e+002f, -3.012569999694824e+001f);
    vs[1].Set(5.376549530029297e+001f, -3.047064208984375e+001f);
    vs[2].Set(5.364236831665039e+001f, -4.864977264404297e+001f);
    vs[3].Set(2.124460601806641e+002f, -1.206493225097656e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(2.713219261169434e+001f, -4.101736450195312e+002f);
    vs[1].Set(2.702711296081543e+001f, -3.904467468261719e+002f);
    vs[2].Set(2.650091552734375e+001f, -6.734942016601562e+002f);
    shape.Set(vs, 3);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
  {
    b2FixtureDef fd;
    fd.friction = 2.000000029802322e-001f;
    fd.restitution = 0.000000000000000e+000f;
    fd.density = 1.000000000000000e+000f;
    fd.isSensor = bool(0);
    fd.filter.categoryBits = uint16(1);
    fd.filter.maskBits = uint16(65535);
    fd.filter.groupIndex = int16(0);
    b2PolygonShape shape;
    b2Vec2 vs[8];
    vs[0].Set(2.282692260742188e+002f, -3.895395507812500e+002f);
    vs[1].Set(2.702711296081543e+001f, -3.904467468261719e+002f);
    vs[2].Set(2.713219261169434e+001f, -4.101736450195312e+002f);
    vs[3].Set(2.278708038330078e+002f, -4.103385314941406e+002f);
    shape.Set(vs, 4);

    fd.shape = &shape;

    bodies[1]->CreateFixture(&fd);
  }
}
b2Free(joints);
b2Free(bodies);
joints = NULL;
bodies = NULL;

